/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.xueldor.encrypt;

import com.xueldor.encrypt.controller.CustromEncryt;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author xuexiangyu
 */
public class EncryptJFrame extends javax.swing.JFrame {
    private CustromEncryt custromEncryt;
    private File rememberLastDirFile;

    /**
     * Creates new form EncryptJFrame
     */
    public EncryptJFrame() {
        initComponents();
        custromEncryt = new CustromEncryt(this);
        jTextArea1.setTransferHandler(new DefaultTextTransferHandler(){
            private static final long serialVersionUID = 1L;
            
            @Override
            public boolean importData(JComponent comp, Transferable t) {
                System.out.println("importData");
                try {
                    Object o = t.getTransferData(DataFlavor.javaFileListFlavor);
 
                    String filepath = o.toString();
                    if (filepath.startsWith("[")) {
                        filepath = filepath.substring(1);
                    }
                    if (filepath.endsWith("]")) {
                        filepath = filepath.substring(0, filepath.length() - 1);
                    }
                    jTextArea1.setText(filepath);
                    return true;
                }
                catch (Exception e) {
                    jTextArea1.setText(e.getLocalizedMessage());
                }
                return false;
            }
            @Override
            public boolean canImport(JComponent comp, DataFlavor[] flavors) {
                for (int i = 0; i < flavors.length; i++) {
                    if (DataFlavor.javaFileListFlavor.equals(flavors[i])) {
                        return true;
                    }
                }
                return false;
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jrunButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        outDirLabel1 = new javax.swing.JLabel();
        outDirPathTextField1 = new javax.swing.JTextField();
        notButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jrunButton1.setText("执行");
        jrunButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrunButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        outDirLabel1.setText("输出目录:");

        outDirPathTextField1.setEditable(false);
        outDirPathTextField1.setToolTipText("点击这里选择目录...");
        outDirPathTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                outDirPathTextField1MouseClicked(evt);
            }
        });

        notButton1.setText("原文件上执行");
        notButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jrunButton1)
                        .addGap(18, 18, 18)
                        .addComponent(notButton1)
                        .addGap(0, 485, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(outDirLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(outDirPathTextField1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outDirLabel1)
                    .addComponent(outDirPathTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrunButton1)
                    .addComponent(notButton1))
                .addContainerGap(127, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void outDirPathTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outDirPathTextField1MouseClicked
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if(rememberLastDirFile == null){
            //默认打开在我的电脑视图
            jFileChooser.setCurrentDirectory(jFileChooser.getFileSystemView().getParentDirectory(new File("C:\\")));
        }else{
            jFileChooser.setCurrentDirectory(rememberLastDirFile);
        }
        //        jFileChooser.showSaveDialog(this);
        jFileChooser.showOpenDialog(this);
        File file=jFileChooser.getSelectedFile();
        if(file != null && file.isDirectory()){
            rememberLastDirFile = file;
            System.out.println("文件夹:"+file.getAbsolutePath());
            outDirPathTextField1.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_outDirPathTextField1MouseClicked

    private void jrunButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrunButton1ActionPerformed
        String out = outDirPathTextField1.getText();
        if("".equals(out)){
            JOptionPane.showMessageDialog(rootPane, "选择一个目录作为输出目录");
            return;
        }
        File file = new File(out);
        if(!file.exists() || !file.isDirectory()){
            JOptionPane.showMessageDialog(rootPane, "目标目录不存在或者不是文件夹");
            return;
        }
        String[] list = file.list();
        if(list != null && list.length > 0){
            JOptionPane.showMessageDialog(rootPane, "目标目录不是空文件夹");
            return;
        }
        String paths = jTextArea1.getText();
        if(paths == null || (paths = paths.trim()).length() == 0){
            JOptionPane.showMessageDialog(rootPane, "请将文件拖到文本区域");
            return;
        }
        String[] split = paths.split(",");
        for(int i = 0;i < split.length;i++){
            split[i] = split[i].trim();
        }
        for (String s : split) {
            if(out.contains(s)){
                JOptionPane.showMessageDialog(rootPane, "源路径不能包含目标路径");
                return;
            }
        }
        custromEncryt.setFiles(split,out);
        
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    custromEncryt.doCompl();
                    JOptionPane.showMessageDialog(rootPane, "Finish");
                } catch (IOException ex) {
                    Logger.getLogger(EncryptJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(rootPane, "出错了！");
                }
                jrunButton1.setEnabled(true);
            }
        }).start();
        
        jrunButton1.setEnabled(false);
    }//GEN-LAST:event_jrunButton1ActionPerformed

    private void notButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notButton1ActionPerformed
        String paths = jTextArea1.getText();
        if(paths == null || (paths = paths.trim()).length() == 0){
            JOptionPane.showMessageDialog(rootPane, "请将文件拖到文本区域");
            return;
        }
        String[] split = paths.split(",");
        custromEncryt.setFiles(split);
        
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    custromEncryt.doComplOriginFile();
                    JOptionPane.showMessageDialog(rootPane, "Finish");
                } catch (IOException ex) {
                    Logger.getLogger(EncryptJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(rootPane, "出错了！");
                }
                notButton1.setEnabled(true);
            }
        }).start();
        
        notButton1.setEnabled(false);
    }//GEN-LAST:event_notButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EncryptJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EncryptJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EncryptJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EncryptJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EncryptJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton jrunButton1;
    private javax.swing.JButton notButton1;
    private javax.swing.JLabel outDirLabel1;
    private javax.swing.JTextField outDirPathTextField1;
    // End of variables declaration//GEN-END:variables
}
