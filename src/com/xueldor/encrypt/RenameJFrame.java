/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.xueldor.encrypt;

import com.xueldor.encrypt.controller.CustomRename;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author xuexiangyu
 */
public class RenameJFrame extends javax.swing.JFrame {
    
    private DefaultTableModel mTableModel = new DefaultTableModel(new Object[][]{},new String[]{"原文件名","预览"}){

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
                
    };
    private StringBuilder logStringBuilder = new StringBuilder();
    private ArrayList<CellObj> fileList = new ArrayList<CellObj>();
    private Map<File, File> doBatchMap;

    /**
     * Creates new form RenameJFrame
     */
    public RenameJFrame() {
        initComponents();
        ActionListener listen = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                onRuleChange();
            }
        };
        jIsRecursionCheckBox1.addActionListener(listen);
        jBase64RadioButton1.addActionListener(listen);
        jHexRadioButton2.addActionListener(listen);
        jForwardRadioButton3.addActionListener(listen);
        jBackwardRadioButton4.addActionListener(listen);
        ((JComponent)(jTable1.getParent())).setTransferHandler(new DefaultTextTransferHandler(){
            private static final long serialVersionUID = 1L;
            
            @Override
            public boolean importData(JComponent comp, Transferable t) {
                System.out.println("import files");
                try {
                    Object o = t.getTransferData(DataFlavor.javaFileListFlavor);
 
                    String filepath = o.toString();
                    if (filepath.startsWith("[")) {
                        filepath = filepath.substring(1);
                    }
                    if (filepath.endsWith("]")) {
                        filepath = filepath.substring(0, filepath.length() - 1);
                    }
                    String[] split = filepath.split(",");
                    for (int i = 0; i < split.length; i++) {
                        split[i] = split[i].trim();
                    }
                    DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                    model.setRowCount(split.length);
                    fileList.clear();
                    for (int i = 0; i < split.length; i++) {
                        File f = new File(split[i]);
                        CellObj obj = new CellObj(f.getName(),f);
                        model.setValueAt(obj,i,0);
                        fileList.add(obj);
                    }
                    onRuleChange();
                    return true;
                }
                catch (Exception e) {
                    logStringBuilder.append(e.getLocalizedMessage() + '\n');
                }
                return false;
            }
            @Override
            public boolean canImport(JComponent comp, DataFlavor[] flavors) {
                for (int i = 0; i < flavors.length; i++) {
                    if (DataFlavor.javaFileListFlavor.equals(flavors[i])) {
                        return true;
                    }
                }
                return false;
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jdoRenameButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlogTextArea1 = new javax.swing.JTextArea();
        jIsRecursionCheckBox1 = new javax.swing.JCheckBox();
        jBase64RadioButton1 = new javax.swing.JRadioButton();
        jHexRadioButton2 = new javax.swing.JRadioButton();
        jForwardRadioButton3 = new javax.swing.JRadioButton();
        jBackwardRadioButton4 = new javax.swing.JRadioButton();
        jClearButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setToolTipText("拖拽文件到这里");

        jTable1.setModel(mTableModel);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setHeaderValue("原文件名");
            jTable1.getColumnModel().getColumn(1).setHeaderValue("预览");
        }

        jdoRenameButton1.setText("执行");
        jdoRenameButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jdoRenameButton1ActionPerformed(evt);
            }
        });

        jlogTextArea1.setEditable(false);
        jlogTextArea1.setColumns(20);
        jlogTextArea1.setRows(5);
        jScrollPane2.setViewportView(jlogTextArea1);

        jIsRecursionCheckBox1.setText("是否递归");

        buttonGroup1.add(jBase64RadioButton1);
        jBase64RadioButton1.setText("Base64");

        buttonGroup1.add(jHexRadioButton2);
        jHexRadioButton2.setText("HEX");

        buttonGroup2.add(jForwardRadioButton3);
        jForwardRadioButton3.setSelected(true);
        jForwardRadioButton3.setText("正向");

        buttonGroup2.add(jBackwardRadioButton4);
        jBackwardRadioButton4.setText("逆向");

        jClearButton1.setText("清除日志");
        jClearButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jClearButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jForwardRadioButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBackwardRadioButton4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jIsRecursionCheckBox1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBase64RadioButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jHexRadioButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jdoRenameButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jClearButton1)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jIsRecursionCheckBox1)
                    .addComponent(jBase64RadioButton1)
                    .addComponent(jHexRadioButton2))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jForwardRadioButton3)
                    .addComponent(jBackwardRadioButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jdoRenameButton1)
                    .addComponent(jClearButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jdoRenameButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jdoRenameButton1ActionPerformed
        boolean useBase64 = jBase64RadioButton1.isSelected();
        boolean useHex = jHexRadioButton2.isSelected();
        if(!useBase64 && !useHex){
            JOptionPane.showMessageDialog(rootPane, "指定编码方案，base64或HEX");
            return;
        }

        if(doBatchMap != null && doBatchMap.size() > 0){
            jdoRenameButton1.setEnabled(false);
            for (Map.Entry<File, File> entry : doBatchMap.entrySet()) {
                File src = entry.getKey();
                File dst = entry.getValue();
                boolean suc = src.renameTo(dst);
                if(!suc){
                    logStringBuilder.append("无法将").append(src.getName()).append("重命名为").append(dst.getName()).append('\n');
                    jlogTextArea1.setText(logStringBuilder.toString());
                }
            }
            jdoRenameButton1.setEnabled(true);
        }else{
            JOptionPane.showMessageDialog(rootPane, "没有可以转换的文件");
        }
    }//GEN-LAST:event_jdoRenameButton1ActionPerformed

    private void jClearButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jClearButton1ActionPerformed
        logStringBuilder.delete(0, logStringBuilder.length());
        jlogTextArea1.setText(logStringBuilder.toString());
    }//GEN-LAST:event_jClearButton1ActionPerformed

    private void onRuleChange(){
        if(fileList.isEmpty()){
            return;
        }
        boolean recursion = jIsRecursionCheckBox1.isSelected();
        boolean useBase64 = jBase64RadioButton1.isSelected();
        boolean useHex = jHexRadioButton2.isSelected();
        boolean forward = jForwardRadioButton3.isSelected();
        if(!useBase64 && !useHex){
            return;
        }
        logStringBuilder.append("预览当前方案：").append(recursion?"递归所有目录":"不递归目录");
        logStringBuilder.append("，方案").append(useBase64?"Base64":"HEX");
        logStringBuilder.append("，").append(forward?"正向编码\n":"逆向解码\n");
        ArrayList<CellObj> previewList = new ArrayList<>();
        StringBuilder logSB = new StringBuilder();
        doBatchMap = new CustomRename().doBatchPreview(recursion, useBase64, forward,fileList,previewList,logSB);
        
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        for (int i = 0; i < previewList.size(); i++) {
           String s = previewList.get(i).name;
            model.setValueAt(s,i,1);
        }
        logStringBuilder.append(logSB);
        jlogTextArea1.setText(logStringBuilder.toString());
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RenameJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RenameJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RenameJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RenameJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new RenameJFrame().setVisible(true);
            }
        });
    }
    
    public static class CellObj{
        private String name;
        private File file;

        public CellObj(String name, File file) {
            this.name = name;
            this.file = file;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public File getFile() {
            return file;
        }

        public void setFile(File file) {
            this.file = file;
        }

        @Override
        public String toString() {
            return name;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton jBackwardRadioButton4;
    private javax.swing.JRadioButton jBase64RadioButton1;
    private javax.swing.JButton jClearButton1;
    private javax.swing.JRadioButton jForwardRadioButton3;
    private javax.swing.JRadioButton jHexRadioButton2;
    private javax.swing.JCheckBox jIsRecursionCheckBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jdoRenameButton1;
    private javax.swing.JTextArea jlogTextArea1;
    // End of variables declaration//GEN-END:variables
}
